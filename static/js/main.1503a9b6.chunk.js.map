{"version":3,"sources":["redux/reducers/pokemonReducer.js","redux/reducers/teamReducer.js","redux/reducers/index.js","redux/types.js","redux/store.js","redux/actions/teamActions.js","Helpers.js","components/PokemonType.js","components/pokemonSelection/Pokemon.js","components/pokemonSelection/PokemonList.js","components/pokemonSelection/SearchFilterSortBar.js","components/pokemonSelection/PokemonSelection.js","components/teamManager/PokemonMember.js","components/teamManager/TeamManager.js","components/infoPanel/TeamOverview.js","components/infoPanel/PokemonInfoview.js","components/infoPanel/InfoPanel.js","App.js","redux/actions/pokemonActions.js","index.js"],"names":["initialState","team","selectedPokemon","combineReducers","pokemon","state","action","type","payload","sort","a","b","num","i","length","evolution_chain_url","isFinalEvo","newTeam","undefined","push","pokemonMember","splice","slot","selected","pokemonid","middleware","thunk","store","createStore","rootReducer","applyMiddleware","setSelectedPokemon","id","dispatch","getTypeColor","color","getTypeDefenseStrengths","types","strengths","normal","flying","ground","bug","steel","water","electric","ice","dark","fighting","poison","rock","ghost","fire","grass","psychic","dragon","fairy","uppercase","str","charAt","toUpperCase","slice","PokemonType","getStyle","props","noBorder","backgroundColor","border","chroma","darken","className","style","this","Component","Pokemon","addPokemonToTeam","addToTeam","getPokedexNum","toString","getTypeColorBarStyle","typeIndex","saturate","width","renderStats","jsx","key","stats","map","stat","index","name","viewInfo","e","stopPropagation","onClick","bind","src","sprite","connect","PokemonList","getStatAverage","getPokemonList","searchOptions","search","typeFilter","finalEvoFilter","toLowerCase","replace","pokemonList","filter","includes","isBaby","height","itemCount","itemSize","SearchFilterSortBar","setSearchOptions","setTimeout","changeSearch","setState","target","value","setTypeFilter","setSort","toggleFinalEvoFilter","getToggleStyle","bool","onChange","placeholder","PokemonSelection","newSearchOptions","PokemonMember","removePokemonFromTeam","removeFromTeam","borderLeft","borderTop","borderRight","borderBottom","borderColor","renderName","renderSprite","alt","renderInfoBtn","renderTypes","ownProps","parseInt","TeamManager","TeamOverview","getAvgStrengths","teamTypeStrengths","pokemonTeam","avgStrengths","getAvgStats","pokemonStats","avgStats","j","Math","round","renderOverview","good","average","bad","strength","PokemonInfoview","toOverview","renderStrengths","immune","pointfive","one","two","four","renderDetails","descriptions","description","random","text","game","nextProps","InfoPanel","getPokemon","renderInfoPanel","console","log","memberid","App","fetchPoke","setInterval","Promise","all","axios","get","then","response","res1","res2","data","reverse","newPokemon","base_stat","is_baby","flavor_text_entries","entry","language","flavor_text","version","sprites","front_default","evolution_chain","url","catch","err","clearInterval","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1503a9b6.chunk.js","sourcesContent":["import { FETCH_POKEMON } from '../types'\r\n\r\nconst initialState = []\r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case 'FETCH_POKEMON': \r\n            let pokemon = action.payload.pokemon.sort((a, b) => a.num - b.num)\r\n            for(let i=0; i<pokemon.length; i++) {\r\n                //set isFinalEvo\r\n                if(i > 0) {\r\n                    if(pokemon[i].evolution_chain_url !== pokemon[i-1].evolution_chain_url) {\r\n                        pokemon[i-1].isFinalEvo = true\r\n                    }\r\n                }\r\n            }\r\n            return [...pokemon]\r\n        default:\r\n            return state\r\n    }\r\n}","import { ADD_TO_TEAM, REMOVE_FROM_TEAM, SET_SELECTED_POKEMON } from '../types'\r\n\r\nconst initialState = {\r\n    team: [],\r\n    selectedPokemon: 0\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n    let newTeam = undefined\r\n    switch(action.type) {\r\n        case ADD_TO_TEAM:\r\n            newTeam = state.team\r\n            if(newTeam.length < 6) {\r\n                newTeam.push(action.payload.pokemonMember)\r\n            }\r\n            return {...state, team: newTeam}                                        \r\n        case REMOVE_FROM_TEAM: \r\n            newTeam = state.team\r\n            newTeam.splice(action.payload.slot - 1, 1)\r\n            return {...state, team: newTeam} \r\n        case SET_SELECTED_POKEMON: \r\n            let selected = action.payload.pokemonid\r\n            return {...state, selectedPokemon: selected}                                       \r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport pokemonReducer from './pokemonReducer'\r\nimport teamReducer from './teamReducer'\r\n/* createStore requites the 1st argument(rootReducer) to be a function, hence\r\nwhy we are exporting a function. */\r\n\r\n/* combineReducers takes in an object {} */\r\n\r\n/* combineReducer  combines all reducers. reducers can include postReducer, \r\nauthReducer, todoReducer, assignmentReducer, etc... basically any\r\nreducer you make */\r\n\r\nexport default combineReducers({\r\n    pokemon: pokemonReducer,\r\n    team: teamReducer\r\n})\r\n","export const FETCH_POKEMON = 'FETCH_POKEMON';\r\n\r\nexport const ADD_TO_TEAM = 'ADD_TO_TEAM'\r\nexport const REMOVE_FROM_TEAM = 'REMOVE_FROM_TEAM'\r\n\r\nexport const SET_SELECTED_POKEMON = 'SET_SELECTED_POKEMON'\r\n","import { createStore, applyMiddleware, compose } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport rootReducer from './reducers/index.js'\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer, \r\n    initialState, \r\n    applyMiddleware(...middleware),\r\n\r\n)\r\n\r\n\r\nexport default store;\r\n\r\n/*compose(\r\n    applyMiddleware(...middleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    )*/","import { ADD_TO_TEAM, REMOVE_FROM_TEAM, SET_SELECTED_POKEMON } from '../types'\r\n\r\nexport const addToTeam = pokemon => {\r\n    return dispatch => {\r\n        dispatch({\r\n            type:ADD_TO_TEAM,\r\n            payload: {\r\n                pokemonMember: `${pokemon.num}`\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const removeFromTeam = slot => {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: REMOVE_FROM_TEAM,\r\n            payload: {\r\n                slot   \r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const setSelectedPokemon = id => {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: SET_SELECTED_POKEMON,\r\n            payload: {\r\n                pokemonid: id\r\n            }\r\n        })\r\n    }\r\n}","//get color of type ie - Fire = red, Water = blue\r\nexport const getTypeColor = type => {\r\n    let color = ''\r\n    switch(type) {\r\n        case 'normal':\r\n            color='#bebeb2'\r\n            break\r\n        case 'grass':\r\n            color='#8cd751'\r\n            break\r\n        case 'fire':\r\n            color='#fa5643'\r\n            break\r\n        case 'water':\r\n            color='#56aeff'\r\n            break\r\n        case 'fighting':\r\n            color='#a85644'\r\n            break\r\n        case 'flying':\r\n            color='#79a3ff'\r\n            break\r\n        case 'poison':\r\n            color='#ab5da2'\r\n            break\r\n        case 'ground':\r\n            color='#e9c856'\r\n            break\r\n        case 'rock':\r\n            color='#cdbc72'\r\n            break\r\n        case 'bug':\r\n            color='#c3d21f'\r\n            break\r\n        case 'ghost':\r\n            color='#7975d7'\r\n            break\r\n        case 'electric':\r\n            color='#fde53c'\r\n            break\r\n        case 'psychic':\r\n            color='#f26295'\r\n            break\r\n        case 'ice':\r\n            color='#96f1ff'\r\n            break\r\n        case 'dragon':\r\n            color='#8673ff'\r\n            break\r\n        case 'dark':\r\n            color='#866350'\r\n            break\r\n        case 'steel':\r\n            color='#c4c2db'\r\n            break\r\n        case 'fairy':\r\n            color='#faadff'\r\n            break\r\n        default:\r\n            color='#bebeb2'\r\n            break\r\n    }\r\n    return color\r\n}\r\n\r\n//gets strengths and weaknesses based on types\r\nexport const getTypeDefenseStrengths = types => {\r\n    //initializes strengths/weaknesses\r\n    let strengths = {normal: 1,flying: 1,ground: 1,bug: 1,steel: 1,water: 1,electric: 1,ice: 1,dark: 1,\r\n        fighting: 1,poison: 1,rock: 1,ghost: 1,fire: 1,grass: 1,psychic: 1,dragon: 1,fairy: 1}\r\n\r\n    for(let i = 0; i < types.length; i++) {\r\n        switch(types[i]) {\r\n            case 'normal':\r\n                strengths.fighting *= 2\r\n                strengths.ghost *= 0\r\n                break\r\n            case 'grass':\r\n                strengths.flying *= 2\r\n                strengths.poison *= 2\r\n                strengths.bug *= 2\r\n                strengths.fire *= 2\r\n                strengths.ice *= 2\r\n                strengths.ground *= .5\r\n                strengths.water *= .5\r\n                strengths.grass *= .5\r\n                strengths.electric *= .5\r\n                break\r\n            case 'fire':\r\n                strengths.ground *= 2\r\n                strengths.rock *= 2\r\n                strengths.water *= 2\r\n                strengths.bug *= .5\r\n                strengths.steel *= .5\r\n                strengths.fire *= .5\r\n                strengths.grass *= .5\r\n                strengths.ice *= .5\r\n                strengths.fairy *= .5\r\n                break\r\n            case 'water':\r\n                strengths.grass *= 2\r\n                strengths.electric *= 2\r\n                strengths.steel *= .5\r\n                strengths.fire *= .5\r\n                strengths.water *= .5\r\n                strengths.ice *= .5\r\n                break\r\n            case 'fighting':\r\n                strengths.flying *= 2\r\n                strengths.psychic *= 2\r\n                strengths.fairy *= 2\r\n                strengths.rock *= .5\r\n                strengths.bug *= .5\r\n                strengths.dark *= .5\r\n                break\r\n            case 'flying':\r\n                strengths.rock *= 2\r\n                strengths.electric *= 2\r\n                strengths.ice *= 2\r\n                strengths.grass *= .5\r\n                strengths.bug *= .5\r\n                strengths.fighting *= .5\r\n                strengths.ground *= 0\r\n                break\r\n            case 'poison':\r\n                strengths.ground *= 2\r\n                strengths.psychic *= 2\r\n                strengths.fighting *= .5\r\n                strengths.poison *= .5\r\n                strengths.bug *= .5\r\n                strengths.grass *= .5\r\n                strengths.fairy *= .5\r\n                break\r\n            case 'ground':\r\n                strengths.water *= 2\r\n                strengths.grass *= 2\r\n                strengths.ice *= 2\r\n                strengths.rock *= .5\r\n                strengths.poison *= .5\r\n                strengths.electric *= 0\r\n                break\r\n            case 'rock':\r\n                strengths.fighting *= 2\r\n                strengths.ground *= 2\r\n                strengths.steel *= 2\r\n                strengths.water *= 2\r\n                strengths.grass *= 2\r\n                strengths.normal *= .5\r\n                strengths.flying *= .5\r\n                strengths.poison *= .5\r\n                strengths.fire *= .5\r\n                break\r\n            case 'bug':\r\n                strengths.flying *= 2\r\n                strengths.rock *= 2\r\n                strengths.fire *= 2\r\n                strengths.fighting *= .5\r\n                strengths.ground *= .5\r\n                strengths.grass *= .5\r\n                break\r\n            case 'ghost':\r\n                strengths.ghost *= 2\r\n                strengths.dark *= 2\r\n                strengths.poison *= .5\r\n                strengths.bug *= .5\r\n                strengths.normal *= 0\r\n                strengths.fighting *= 0\r\n                break\r\n            case 'electric':\r\n                strengths.ground *= 2\r\n                strengths.flying *= .5\r\n                strengths.steel *= .5\r\n                strengths.electric *= .5\r\n                break\r\n            case 'psychic':\r\n                strengths.bug *= 2\r\n                strengths.ghost *= 2\r\n                strengths.dark *= 2\r\n                strengths.fighting *= .5\r\n                strengths.psychic *= .5\r\n                break\r\n            case 'ice':\r\n                strengths.fighting *= 2\r\n                strengths.rock *= 2\r\n                strengths.steel *= 2\r\n                strengths.fire *= 2\r\n                strengths.ice *= .5\r\n                break\r\n            case 'dragon':\r\n                strengths.ice *= 2\r\n                strengths.dragon *= 2\r\n                strengths.fairy *= 2\r\n                strengths.fire *= .5\r\n                strengths.water *= .5\r\n                strengths.grass *= .5\r\n                strengths.electric *= .5\r\n                break\r\n            case 'dark':\r\n                strengths.fighting *= 2\r\n                strengths.bug *= 2\r\n                strengths.fairy *= 2\r\n                strengths.ghost *= .5\r\n                strengths.dark *= .5\r\n                strengths.psychic *= 0\r\n                break\r\n            case 'steel':\r\n                strengths.fighting *= 2\r\n                strengths.ground *= 2\r\n                strengths.fire *= 2\r\n                strengths.normal *= .5\r\n                strengths.flying *= .5\r\n                strengths.rock *= .5\r\n                strengths.bug *= .5\r\n                strengths.steel *= .5\r\n                strengths.grass *= .5\r\n                strengths.psychic *= .5\r\n                strengths.ice *= .5\r\n                strengths.dragon *= .5\r\n                strengths.fairy *= .5\r\n                strengths.poison *= 0\r\n                break\r\n            case 'fairy':\r\n                strengths.poison *= 2\r\n                strengths.steel *= 2\r\n                strengths.dark *= .5\r\n                strengths.bug *= .5\r\n                strengths.fighting *= .5\r\n                strengths.dragon *= 0\r\n                break \r\n            default:\r\n                break\r\n        }\r\n    }\r\n    return strengths\r\n}\r\n\r\n\r\n//Uppercases first letter of a string and returns it\r\nexport const uppercase = str => {\r\n    return str.charAt(0).toUpperCase() + str.slice(1)\r\n}","import React, { Component } from 'react'\r\nimport chroma from 'chroma-js'\r\n\r\nimport { getTypeColor } from '../Helpers.js'\r\n\r\nimport './misc.scss'\r\n\r\nexport class PokemonType extends Component {\r\n\r\n    getStyle = () => {\r\n        if(this.props.noBorder) {\r\n            return { backgroundColor: `${getTypeColor(this.props.type)}`}\r\n        } else {\r\n            return { backgroundColor: `${getTypeColor(this.props.type)}`,\r\n                    border: `.25vmax solid ${chroma(getTypeColor(this.props.type)).darken(.5)}`}\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='pokemon-type' style={this.getStyle()}>\r\n                {this.props.type.charAt(0).toUpperCase() + this.props.type.slice(1)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PokemonType\r\n","import React, { Component } from 'react'\r\nimport chroma from 'chroma-js'\r\nimport { connect } from 'react-redux'\r\n\r\nimport PokemonType from '../PokemonType'\r\n\r\nimport { getTypeColor } from '../../Helpers'\r\n\r\nimport { addToTeam, setSelectedPokemon } from '../../redux/actions/teamActions'\r\n\r\nexport class Pokemon extends Component {\r\n\r\n    addPokemonToTeam = () => {\r\n        //Adds this pokemon to the team\r\n        this.props.addToTeam(this.props.pokemon)\r\n    }\r\n\r\n    getPokedexNum = () => {\r\n        let { num } = this.props.pokemon\r\n        num = num.toString()\r\n        \r\n        if(num.length === 1) num = '00' + num\r\n        if(num.length === 2) num = '0' + num\r\n\r\n        return `#${num}`\r\n    }\r\n    getTypeColorBarStyle = (typeIndex) => {\r\n        const {types} = this.props.pokemon\r\n        let style = {}\r\n        if(types[typeIndex]) {\r\n            let backgroundColor = chroma(getTypeColor(types[typeIndex])).saturate(3)\r\n            style.backgroundColor = backgroundColor\r\n\r\n            //Sets width to 100% if there is no second type\r\n            if(typeIndex === 0 && !types[typeIndex + 1]) {\r\n                style.width = '100%'\r\n            }\r\n        }\r\n        return style\r\n    }\r\n    renderStats = () => {\r\n        //stats order is - hp, atk, def, spatk, spdef, speed\r\n        let jsx = []\r\n\r\n        //pushes stat names into jsx\r\n        jsx.push(\r\n            <div key='stat-names' className='stat-names'>\r\n                <p key='stat-hp-name'>HP</p>\r\n                <p key='stat-atk-name'>Atk</p>\r\n                <p key='stat-def-name'>Def</p>\r\n                <p key='stat-spatk-name'>SpAtk</p>\r\n                <p key='stat-apdef-name'>SpDef</p>\r\n                <p key='stat-speed-name'>Speed</p>\r\n            </div>\r\n        )\r\n        //pushes the stat numbers into jsx\r\n        jsx.push(\r\n            <div key='stat-nums' className='stat-nums'>\r\n                {this.props.pokemon.stats.map((stat, index) => (\r\n                    <p key={`${this.props.pokemon.name}-stat-${index}`}>{`${stat}`}</p>\r\n                ))}\r\n            </div>\r\n        )\r\n        return jsx\r\n    }\r\n    viewInfo = e => {\r\n        e.stopPropagation()\r\n        this.props.setSelectedPokemon(this.props.pokemon.num)\r\n    }\r\n    render() {\r\n        return (\r\n            \r\n            <div className='pokemon' onClick={this.addPokemonToTeam}>\r\n                <div className='type-color' style={this.getTypeColorBarStyle(0)}/>\r\n                <div className='type2-color' style={this.getTypeColorBarStyle(1)}/>\r\n                <p className='pokedex-num'>{this.getPokedexNum()}</p>\r\n                <p className='more-info-btn' onClick={this.viewInfo.bind(this)}>?</p>\r\n                <div className='sprite'>\r\n                    <img src={this.props.pokemon.sprite}></img>\r\n                </div>\r\n                <div className='info'>\r\n                    <h1>\r\n                        {`${this.props.pokemon.name.charAt(0).toUpperCase() + this.props.pokemon.name.slice(1)}`}\r\n                    </h1>\r\n\r\n                    <div className='types' >\r\n                        {this.props.pokemon.types.map(type => {\r\n                            return <PokemonType className='type' type={type} key={`${this.props.key} - ${type}`} />\r\n                        })}\r\n                    </div>\r\n                    <div className='stats'>\r\n                        \r\n                        {this.renderStats()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(null, {addToTeam, setSelectedPokemon})(Pokemon)\r\n","import React, { Component } from 'react'\r\nimport { FixedSizeList as List} from 'react-window'\r\nimport AutoSizer from 'react-virtualized-auto-sizer'\r\n\r\nimport Pokemon from './Pokemon'\r\n\r\n\r\nexport class PokemonList extends Component {\r\n\r\n    getStatAverage = stats => {\r\n        //gets average of all stats(speed, hp, attack, etc...)\r\n        let avg = (stats[0] + stats[1] + stats[2] + stats[3] + stats[4] + stats[5])/6\r\n        return avg\r\n    }\r\n    getPokemonList = () => {\r\n        let { search, typeFilter, finalEvoFilter, sort } = this.props.searchOptions\r\n\r\n        search = search.toLowerCase().replace(' ', '')\r\n\r\n        let pokemonList = this.props.pokemon\r\n\r\n        if(search !== '') {\r\n            pokemonList = pokemonList.filter(pokemon => pokemon.name.includes(search))\r\n        }\r\n        if(typeFilter !== 'all') {\r\n            pokemonList = pokemonList.filter(pokemon => {\r\n                const types = pokemon.types\r\n                if(types[0] === typeFilter || types[1] === typeFilter) {\r\n                    return pokemon\r\n                }\r\n            })\r\n        }\r\n        //Sorts the pokemonList depending of value of sort\r\n        switch(sort) {\r\n            case 'stat-average':\r\n                pokemonList = pokemonList.sort((a,b) => this.getStatAverage(b.stats) - this.getStatAverage(a.stats))\r\n                break\r\n            case 'stat-speed':\r\n                pokemonList = pokemonList.sort((a,b) => b.stats[5] - a.stats[5])\r\n                break\r\n            case 'stat-hp':\r\n                pokemonList = pokemonList.sort((a,b) => b.stats[0] - a.stats[0])\r\n                break\r\n            case 'stat-attack':\r\n                pokemonList = pokemonList.sort((a,b) => b.stats[1] - a.stats[1])\r\n                break\r\n            case 'stat-defense':\r\n                pokemonList = pokemonList.sort((a,b) => b.stats[2] - a.stats[2])\r\n                break\r\n            case 'stat-specialattack':\r\n                pokemonList = pokemonList.sort((a,b) => b.stats[3] - a.stats[3])\r\n                break\r\n            case 'stat-specialdefense':\r\n                pokemonList = pokemonList.sort((a,b) => b.stats[4] - a.stats[4])\r\n                break\r\n            default:\r\n                pokemonList = pokemonList.sort((a,b) => a.num - b.num)\r\n                break\r\n        }\r\n        if(finalEvoFilter) {\r\n            pokemonList = pokemonList.filter(pokemon => pokemon.isFinalEvo && !pokemon.isBaby)\r\n        }\r\n        return pokemonList\r\n    }\r\n\r\n    render() {\r\n        const pokemonList = this.getPokemonList()\r\n        return (\r\n            <div className='pokemon-list'>\r\n                <AutoSizer >\r\n                    {({ height, width }) => (\r\n                        <List\r\n                        height={height}\r\n                        itemCount={pokemonList.length}\r\n                        itemSize={height/5}\r\n                        width={width}\r\n                    >\r\n                        {({index, style}) => \r\n                            <div style={style}>\r\n                                <Pokemon pokemon={pokemonList[index]} key={`pokemon-${pokemonList[index].num}`}/>\r\n                            </div>\r\n                        }\r\n                    </List>\r\n                    )}\r\n                </AutoSizer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PokemonList\r\n/* */\r\n\r\n                /*<List\r\n                    className='list'\r\n                    height={1000}\r\n                    itemCount={pokemonList.length}\r\n                    itemSize={window.innerHeight/5}\r\n                    width={1000}\r\n                >\r\n                    {({index, style}) => <Pokemon pokemon={pokemonList[index]} style={style}key={`pokemon-${pokemonList[index].num}`}/>}\r\n                </List>*/\r\n\r\n                /*{this.getPokemonList().map(pokemon => (\r\n                        <Pokemon pokemon={pokemon} key={`pokemon-${pokemon.num}`}/>\r\n                ))}*/","import React, { Component } from 'react'\r\n\r\nexport class SearchFilterSortBar extends Component {\r\n    state = {\r\n        search: '',\r\n        typeFilter: 'all',\r\n        finalEvoFilter: false,\r\n        sort: 'pokedex-entry'\r\n    }\r\n\r\n    setSearchOptions = () => {\r\n        setTimeout(() => {\r\n            this.props.setSearchOptions({...this.state})\r\n        }, 10)\r\n    }\r\n\r\n    changeSearch = e => {\r\n        this.setState({...this.state, search: e.target.value}, this.setSearchOptions())\r\n    }\r\n    setTypeFilter = e => {\r\n        this.setState({...this.state, typeFilter: e.target.value}, this.setSearchOptions())\r\n    }\r\n    setSort = e => {\r\n        this.setState({...this.state, sort: e.target.value}, this.setSearchOptions())\r\n    }\r\n    toggleFinalEvoFilter = () => {\r\n        const finalEvoFilter = !this.state.finalEvoFilter\r\n        this.setState({...this.state, finalEvoFilter}, this.setSearchOptions())\r\n    }\r\n    getToggleStyle = (bool) => {\r\n        if(bool) return 'on'\r\n        else return 'off'\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='search-filter-sort-bar'>\r\n                <input type='text' onChange={this.changeSearch.bind(this)} placeholder='Search for pokemon'/>\r\n                <p className='text'>Filter by:</p>\r\n                <div className='type-filter'>\r\n                    <select onChange={this.setTypeFilter.bind(this)}>\r\n                        <option value='all'>All Types</option>\r\n                        <option value='normal'>Normal</option>\r\n                        <option value='grass'>Grass</option>\r\n                        <option value='fire'>Fire</option>\r\n                        <option value='water'>Water</option>\r\n                        <option value='fighting'>Fighting</option>\r\n                        <option value='flying'>Flying</option>\r\n                        <option value='poison'>Poison</option>\r\n                        <option value='ground'>Ground</option>\r\n                        <option value='rock'>Rock</option>\r\n                        <option value='bug'>Bug</option>\r\n                        <option value='ghost'>Ghost</option>\r\n                        <option value='electric'>Electric</option>\r\n                        <option value='psychic'>Psychic</option>\r\n                        <option value='ice'>Ice</option>\r\n                        <option value='dragon'>Dragon</option>\r\n                        <option value='dark'>Dark</option>\r\n                        <option value='steel'>Steel</option>\r\n                        <option value='fairy'>Fairy</option>\r\n                    </select>\r\n                    <div className='arrow'></div>\r\n                </div>\r\n                <button onClick={this.toggleFinalEvoFilter} className={`toggle-finalevo-filter ${this.getToggleStyle(this.state.finalEvoFilter)}`}>\r\n                    Final Evolutions Only\r\n                </button>\r\n                <p className='text'>Sort by:</p>\r\n\r\n                <div className='sort-method'>\r\n                    <select onChange={this.setSort.bind(this)}>\r\n                        <option value='pokedex-entry'>Pokedex Entry</option>\r\n                        <option value='stat-average'> Best Stats</option>\r\n                        <option value='stat-hp'> Stat HP</option>\r\n                        <option value='stat-attack'> Stat Attack</option>\r\n                        <option value='stat-defense'> Stat Defense</option>\r\n                        <option value='stat-specialattack'> Stat SpAttack</option>\r\n                        <option value='stat-specialdefense'> Stat SpDefense</option>\r\n                        <option value='stat-speed'> Stat Speed</option>\r\n                    </select>\r\n                    <div className='arrow'></div>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchFilterSortBar\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport PokemonList from './PokemonList'\r\nimport SearchFilterSortBar from './SearchFilterSortBar'\r\n\r\nimport './pokemonSelection.scss'\r\n\r\nexport class PokemonSelection extends Component {\r\n    state = {\r\n        searchOptions: {\r\n            search: '',\r\n            typeFilter: 'all',\r\n            finalEvoFilter: false,\r\n            sort: 'pokedex-entry'\r\n        }\r\n    }\r\n    setSearchOptions = newSearchOptions => {\r\n        this.setState({...this.state, searchOptions: {...this.state.searchOptions, ...newSearchOptions}})\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='pokemon-selection'>\r\n                <SearchFilterSortBar setSearchOptions={this.setSearchOptions}/>\r\n                <PokemonList pokemon={this.props.pokemon} searchOptions={this.state.searchOptions}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    pokemon: state.pokemon\r\n})\r\n\r\nexport default connect(mapStateToProps, {})(PokemonSelection)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport chroma from 'chroma-js'\r\n\r\nimport { getTypeColor } from '../../Helpers'\r\n\r\nimport PokemonType from '../PokemonType'\r\n\r\nimport { removeFromTeam, setSelectedPokemon } from '../../redux/actions/teamActions'\r\n\r\nexport class PokemonMember extends Component {\r\n\r\n    removePokemonFromTeam = () => {\r\n        this.props.removeFromTeam(this.props.slot)\r\n    }\r\n    getStyle = () => {\r\n        let style = {}\r\n        if(this.props.pokemonMember) {\r\n            const pokemon = this.props.pokemonMember\r\n            style.backgroundColor = getTypeColor(pokemon.types[0]) \r\n            if(pokemon.types[1]) {\r\n                style.borderLeft = `.5vh solid ${chroma(getTypeColor(pokemon.types[0])).darken(1)}`\r\n                style.borderTop = `.5vh solid ${chroma(getTypeColor(pokemon.types[0])).darken(1)}`\r\n                style.borderRight = `.85vh solid ${chroma(getTypeColor(pokemon.types[1])).darken(1)}`\r\n                style.borderBottom = `.85vh solid ${chroma(getTypeColor(pokemon.types[1])).darken(1)}`\r\n            } else {\r\n                style.borderColor = chroma(getTypeColor(pokemon.types[0])).darken(1)\r\n            }\r\n        }\r\n\r\n        return style\r\n    }\r\n    renderName = () => {\r\n        if(this.props.pokemonMember) {\r\n            let name = this.props.pokemonMember.name\r\n            return name.charAt(0).toUpperCase() + name.slice(1)\r\n        }\r\n    }\r\n    renderSprite = () => {\r\n        const pokemon = this.props.pokemonMember\r\n        if(pokemon) {\r\n            return <img src={pokemon.sprite} alt=''/>\r\n        } else return <div className='pokeball'>         \r\n            <div className='top-half'></div>\r\n            <div className='bottom-half'></div>\r\n            <div className='middle-ball'></div>\r\n        </div>\r\n    }\r\n    renderInfoBtn = () => {\r\n        if(this.props.pokemonMember) return (\r\n        <p \r\n            className='more-info-btn'\r\n            onClick={e => {\r\n                e.stopPropagation()\r\n                this.props.setSelectedPokemon(this.props.pokemonMember.num)\r\n            }}\r\n        >?</p>)\r\n    }\r\n    renderTypes = () => {\r\n        if(this.props.pokemonMember) {\r\n            return this.props.pokemonMember.types.map(type => (\r\n                <PokemonType type={type} key={`pokemonmember-${this.props.slot}-type-${type}`}/>\r\n            ))\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='pokemon'>\r\n                <p className='name'>{this.renderName()}</p>\r\n                <div className='sprite' onClick={this.removePokemonFromTeam} style={this.getStyle()}>\r\n                    {this.renderSprite()}\r\n                    {this.renderInfoBtn()}\r\n                    <div className='overlay'></div>\r\n                </div>\r\n                <div className='types' >\r\n                    {this.renderTypes()}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    pokemonMember: state.pokemon.filter(pokemon => pokemon.num === parseInt(state.team.team[parseInt(ownProps.slot)-1]))[0]\r\n})\r\n\r\nexport default connect(mapStateToProps, { removeFromTeam, setSelectedPokemon })(PokemonMember)\r\n","import React, { Component } from 'react'\r\n\r\nimport PokemonMember from './PokemonMember'\r\n\r\nimport './teamManager.scss'\r\n\r\nexport class TeamManager extends Component {\r\n    render() {\r\n        return (\r\n            <div className='team-manager'>\r\n                <div className='team-pokemon'>\r\n                    <PokemonMember slot='1' key='pokemonmember-1'/>\r\n                    <PokemonMember slot='2' key='pokemonmember-2'/>\r\n                    <PokemonMember slot='3' key='pokemonmember-3'/>\r\n                    <PokemonMember slot='4' key='pokemonmember-4'/>\r\n                    <PokemonMember slot='5' key='pokemonmember-5'/>\r\n                    <PokemonMember slot='6' key='pokemonmember-6'/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TeamManager\r\n","import React, { Component } from 'react'\r\n\r\nimport { getTypeDefenseStrengths } from '../../Helpers'\r\n\r\nimport PokemonType from '../PokemonType'\r\n\r\n\r\nexport class TeamOverview extends Component {\r\n    getAvgStrengths = () => {\r\n        //Gets all the strengths/weaknesses of all the pokemon in team\r\n        const teamTypeStrengths = this.props.pokemonTeam.map(pokemon => getTypeDefenseStrengths(pokemon.types))\r\n\r\n        //instantiates the avg strengths/weaknesses\r\n        let avgStrengths = {}\r\n\r\n        //Adds up all the strengths/weaknesses of teamTypeStrengths into avgStrengths\r\n        for(let i=0; i < teamTypeStrengths.length; i++) {\r\n            for(const type in teamTypeStrengths[i]) {\r\n                if(avgStrengths[`${type}`]) {\r\n                    avgStrengths[`${type}`] += teamTypeStrengths[i][`${type}`]\r\n                }\r\n                else avgStrengths[`${type}`] = teamTypeStrengths[i][`${type}`]\r\n            }\r\n        }\r\n        //Divides avgStrengths by the amount of team members to get avg\r\n        for(const type in avgStrengths) {\r\n            avgStrengths[`${type}`] /= teamTypeStrengths.length\r\n        }\r\n        return avgStrengths\r\n    }\r\n    getAvgStats = () => {\r\n        const pokemonStats = this.props.pokemonTeam.map(pokemon => pokemon.stats)\r\n        let avgStats = [0, 0, 0, 0, 0, 0]\r\n\r\n        for(let j = 0; j < pokemonStats.length; j++) {\r\n            const stats = pokemonStats[j]\r\n            for(let i = 0; i < stats.length; i++) {\r\n                avgStats[i] += stats[i]        \r\n            }\r\n        }\r\n        avgStats = avgStats.map(stat => Math.round(stat/pokemonStats.length))\r\n\r\n        return avgStats\r\n    }\r\n    renderOverview = () => {\r\n        //Gets data for average strengths/weaknesses\r\n        const avgStrengths = this.getAvgStrengths()\r\n        let good = [], average = [], bad = []\r\n\r\n        //bad is 1.5 - 4x avg  ...  average is 0.5 - 1.5x avg  ...  good is 0 - 0.5x avg\r\n        for(const type in avgStrengths) {\r\n            const strength = avgStrengths[`${type}`]\r\n            if(strength >= 0 && strength <= .5) good.push(type)\r\n            if(strength > .5 && strength <= 1.5) average.push(type)\r\n            if(strength > 1.5 && strength <= 4) bad.push(type)\r\n        }   \r\n    \r\n        //Gets data for average stats\r\n        const avgStats = this.getAvgStats()\r\n        return <div className='overview'>\r\n            <h1 className='title'>Team Overview</h1>\r\n            <div className='types'>\r\n                <div className='good'>\r\n                    <h1>Good against</h1>\r\n                    <p>(0x - 0.5x dmg)</p>\r\n                    <div className='clearleft'></div>\r\n                    {good.map(type => <PokemonType key={`types-good-${type}`} type={type}/>)}\r\n                </div>\r\n                <div className='average'>\r\n                    <h1>Average against</h1>\r\n                    <p>(0.5x - 1.5x dmg)</p>\r\n                    <div className='clearleft'></div>\r\n                    {average.map(type => <PokemonType key={`types-average-${type}`}type={type}/>)}\r\n                </div>\r\n                <div className='bad'>\r\n                    <h1>Bad against</h1>\r\n                    <p>(1.5x - 4x dmg)</p>\r\n                    <div className='clearleft'></div>\r\n                    {bad.map(type => <PokemonType key={`types-bad-${type}`}type={type}/>)}\r\n                </div>\r\n            </div>\r\n            <div className='stats-avg'>\r\n                <div className='stats'>\r\n                    <div className='stat'>\r\n                        <p className='stat-name'>Speed</p>\r\n                        <p className='stat-num'>{avgStats[5]}</p>\r\n                        <p className='stat-avg'>(avg)</p>\r\n                    </div>\r\n                    <div className='stat'>\r\n                        <p className='stat-name'>HP</p>\r\n                        <p className='stat-num'>{avgStats[0]}</p>\r\n                        <p className='stat-avg'>(avg)</p>\r\n                    </div>\r\n                    <div className='stat'>\r\n                        <p className='stat-name'>Attack</p>\r\n                        <p className='stat-num'>{avgStats[1]}</p>\r\n                        <p className='stat-avg'>(avg)</p>\r\n                    </div>\r\n                    <div className='stat'>\r\n                        <p className='stat-name'>Special Attack</p>\r\n                        <p className='stat-num'>{avgStats[3]}</p>\r\n                        <p className='stat-avg'>(avg)</p>\r\n                    </div>\r\n                    \r\n                    <div className='stat'>\r\n                        <p className='stat-name'>Defense</p>\r\n                        <p className='stat-num'>{avgStats[2]}</p>\r\n                        <p className='stat-avg'>(avg)</p>\r\n                    </div>\r\n                    \r\n                    <div className='stat'>\r\n                        <p className='stat-name'>Special Defense</p>\r\n                        <p className='stat-num'>{avgStats[4]}</p>\r\n                        <p className='stat-avg'>(avg)</p>\r\n                    </div>\r\n                    \r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n    render() {\r\n        return (\r\n               this.renderOverview()\r\n        )\r\n    }\r\n}\r\n\r\nexport default TeamOverview\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport chroma from 'chroma-js'\r\n\r\nimport { setSelectedPokemon } from '../../redux/actions/teamActions'\r\n\r\nimport { uppercase, getTypeDefenseStrengths, getTypeColor } from '../../Helpers'\r\n\r\nimport PokemonType from '../PokemonType'\r\n\r\nexport class PokemonInfoview extends Component {\r\n    shouldComponentUpdate(nextProps) {\r\n        if(this.props.pokemon === nextProps.pokemon) return false\r\n        else return true\r\n    }\r\n    toOverview = () => {\r\n        this.props.setSelectedPokemon(0)\r\n    }\r\n    getTypeColorBarStyle = (typeIndex) => {\r\n        const {types} = this.props.pokemon\r\n        let style = {}\r\n        if(types[typeIndex]) {\r\n            let backgroundColor = chroma(getTypeColor(types[typeIndex])).saturate(3)\r\n            style.backgroundColor = backgroundColor\r\n\r\n            //Sets width to 100% if there is no second type\r\n            if(typeIndex === 0 && !types[typeIndex + 1]) {\r\n                style.width = '106%'\r\n            }\r\n        }\r\n        return style\r\n    }\r\n    renderStrengths = () => {\r\n        //Gets strengths/weaknesses of pokemon\r\n        const strengths = getTypeDefenseStrengths(this.props.pokemon.types)\r\n\r\n        //arrays which will contain types defending on strength\r\n        let immune = [], pointfive = [], one = [], two = [], four = []\r\n        for(const str in strengths) {\r\n            if(strengths[str] === 0) immune.push(str)\r\n            if(strengths[str] === 0.5) pointfive.push(str)\r\n            if(strengths[str] === 1) one.push(str)\r\n            if(strengths[str] === 2) two.push(str)\r\n            if(strengths[str] === 4) four.push(str)\r\n        }\r\n        return (\r\n            <div className='strengths'>\r\n                <h1 className='strengths-title'>Defense Strengths & Weaknesses -</h1>\r\n                <div className='immune'>\r\n                    <h1>Immune</h1>\r\n                    <div className='clearleft'></div>\r\n                    {immune.map(type => <PokemonType key={`types-good-${type}`} type={type}/>)}\r\n                </div>\r\n                <div className='pointfive'>\r\n                    <h1>0.5x</h1>\r\n                    <div className='clearleft'></div>\r\n                    {pointfive.map(type => <PokemonType key={`types-average-${type}`}type={type}/>)}\r\n                </div>\r\n                <div className='one'>\r\n                    <h1>1x</h1>\r\n                    <div className='clearleft'></div>\r\n                    {one.map(type => <PokemonType key={`types-bad-${type}`}type={type}/>)}\r\n                </div>\r\n                <div className='two'>\r\n                    <h1>2x</h1>\r\n                    <div className='clearleft'></div>\r\n                    {two.map(type => <PokemonType key={`types-bad-${type}`}type={type}/>)}\r\n                </div>\r\n                <div className='four'>\r\n                    <h1>4x</h1>\r\n                    <div className='clearleft'></div>\r\n                    {four.map(type => <PokemonType key={`types-bad-${type}`}type={type}/>)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    renderStats = () => {\r\n        const { stats } = this.props.pokemon\r\n        return <div className='stats'>\r\n            <div className='stat'>\r\n                <p className='stat-name'>Speed</p>\r\n                <p className='stat-num'>{stats[5]}</p>\r\n            </div>\r\n            <div className='stat'>\r\n                <p className='stat-name'>HP</p>\r\n                <p className='stat-num'>{stats[0]}</p>\r\n            </div>\r\n            <div className='stat'>\r\n                <p className='stat-name'>Attack</p>\r\n                <p className='stat-num'>{stats[1]}</p>\r\n            </div>\r\n            <div className='stat'>\r\n                <p className='stat-name'>Sp Attack</p>\r\n                <p className='stat-num'>{stats[3]}</p>\r\n            </div>\r\n            \r\n            <div className='stat'>\r\n                <p className='stat-name'>Defense</p>\r\n                <p className='stat-num'>{stats[2]}</p>\r\n            </div>\r\n            \r\n            <div className='stat'>\r\n                <p className='stat-name'>Sp Defense</p>\r\n                <p className='stat-num'>{stats[4]}</p>\r\n            </div>\r\n            \r\n        </div>\r\n    }\r\n    renderDetails = () => {\r\n        const { types, descriptions, sprite } = this.props.pokemon\r\n\r\n        let description = descriptions[Math.round(Math.random() * descriptions.length)]\r\n\r\n        if(description === undefined) description = descriptions[0]\r\n\r\n        return <div className='details'>\r\n            <div className='left'>\r\n                <img src={sprite}></img>\r\n                <div className='types'>\r\n                    {types.map(type => <PokemonType type={type} />)}\r\n                </div>\r\n            </div>\r\n            \r\n            <div className='description'>   \r\n                <p className='text'>{`${description.text}`}</p>\r\n                <p className='game'>{` - Pokemon ${uppercase(description.game)}`}</p>\r\n            </div>\r\n        </div>\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='pokemon-infoview'>\r\n                <div className='type-color' style={this.getTypeColorBarStyle(0)}/>\r\n                <div className='type2-color' style={this.getTypeColorBarStyle(1)}/>\r\n                <h1 className='title'>{`${uppercase(this.props.pokemon.name)} Info`}\r\n                    <h1 onClick={this.toOverview}className='back'> {`← Back to Overview`}</h1>\r\n                </h1>\r\n                {this.renderDetails()}\r\n                {this.renderStats()}\r\n                {this.renderStrengths()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(null, { setSelectedPokemon })(PokemonInfoview)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { getTypeDefenseStrengths } from '../../Helpers'\r\n\r\nimport TeamOverview from './TeamOverview'\r\nimport PokemonInfoview from './PokemonInfoview'\r\nimport PokemonType from '../PokemonType'\r\n\r\nimport './infoPanelOverview.scss'\r\nimport './infoPanelPokemonview.scss'\r\n\r\nexport class InfoPanel extends Component {\r\n\r\n    //Gets pokemon data from id obtained from redux store\r\n    getPokemon = (id) => this.props.pokemon.filter(pokemon => pokemon.num === parseInt(id))[0]\r\n\r\n    renderInfoPanel = () => {\r\n        //If pokemon is selected, render Info View for that pokemon,\r\n        //otherwise, render teamOverview\r\n        if(this.props.team.selectedPokemon !== 0) {  \r\n            console.log(this.props.team.selectedPokemon)\r\n            return <PokemonInfoview pokemon={this.getPokemon(this.props.team.selectedPokemon)}/>\r\n        } else {\r\n            //Render info only if a pokemon is in the team\r\n            if(this.props.team.team.length > 0 ) {    \r\n                return <TeamOverview pokemonTeam={this.props.team.team.map(memberid => this.getPokemon(memberid))}/>      \r\n            } else {\r\n                return <div className='empty-team'>\r\n                    <h1>Your team is empty! <p>Add a Pokemon to your team to get started</p></h1>\r\n                </div>\r\n            }\r\n        }\r\n        \r\n    }\r\n    render() {\r\n        return (\r\n            <div className='info-panel'>\r\n                {this.renderInfoPanel()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    pokemon: state.pokemon,\r\n    team: state.team\r\n})\r\n\r\nexport default connect(mapStateToProps, {})(InfoPanel)\r\n\r\n/*<div className='columns'>\r\n                    {this.renderColumns()}\r\n                </div>*/","import React, { Component } from 'react'\nimport { Provider } from 'react-redux'\n\nimport store from './redux/store'\nimport { fetchPokemon } from './redux/actions/pokemonActions'\nimport { setSelectedPokemon } from './redux/actions/teamActions'\n\nimport PokemonSelection from './components/pokemonSelection/PokemonSelection'\nimport TeamManager from './components/teamManager/TeamManager'\nimport InfoPanel from './components/infoPanel/InfoPanel'\n\nimport './App.scss';\n\nexport class App extends Component {\n    componentDidMount() {\n        store.dispatch(fetchPokemon())\n    }\n\n    render() {\n        return (\n            <Provider store={store} >\n                <div className='app'>\n                    <div className='left-column'>\n                        <TeamManager />\n                        <InfoPanel />\n                    </div>\n                    <div className='right-column'>\n                        <PokemonSelection />\n                    </div>\n                </div>\n            </Provider>\n        )\n    }\n}\n\nexport default App\n","import axios from 'axios'\r\n\r\nimport { FETCH_POKEMON } from '../types'\r\n\r\nexport const fetchPokemon = () => {\r\n    return (dispatch) => {\r\n        let pokemon = []\r\n\r\n        let i = 0\r\n        const fetchPoke = setInterval(() => {\r\n            Promise.all(\r\n                [axios.get(`https://pokeapi.co/api/v2/pokemon/${i+1}`), \r\n                axios.get(`https://pokeapi.co/api/v2/pokemon-species/${i+1}/`)]\r\n            )\r\n                .then(response => {\r\n                    const res1 = response[0]\r\n                    const res2 = response[1]\r\n\r\n                    let types = res1.data.types.sort((a,b) => a.slot-b.slot)\r\n                    //Puts 'normal' type in slot 2 if there are two types\r\n                    if(res1.data.types[0].type.name === 'normal' && res1.data.types[1]) {\r\n                        types = types.reverse()\r\n                    }\r\n                    let newPokemon = {\r\n                        num: res1.data.id, \r\n                        name: res1.data.name,\r\n                        types: types.map(type => type.type.name),\r\n                        //stats order is - hp, atk, def, spatk, spdef, speed\r\n                        stats: res1.data.stats.map(stat => stat.base_stat),\r\n                        //isFinalEvo is set during dispatch\r\n                        isFinalEvo: false,\r\n                        isBaby: res2.data.is_baby,\r\n                        descriptions: res2.data.flavor_text_entries.filter(entry => entry.language.name === 'en').map(entry => {\r\n                            return {\r\n                                text: entry.flavor_text,\r\n                                game: entry.version.name\r\n                            }\r\n                        }),\r\n                        sprite: res1.data.sprites.front_default,\r\n                        evolution_chain_url: res2.data.evolution_chain.url\r\n                    }\r\n\r\n                    pokemon.push({...newPokemon})\r\n                })\r\n                .catch(err => {\r\n                    //send pokemon data if recieved all pokemon\r\n                    dispatch({\r\n                        type: FETCH_POKEMON,\r\n                        payload: {\r\n                            pokemon\r\n                        }\r\n                    })\r\n                    clearInterval(fetchPoke)\r\n                })\r\n            //send pokemon data every 250 pokemon\r\n            if(i % 250 === 0 || i === 12) {\r\n                dispatch({\r\n                    type: FETCH_POKEMON,\r\n                    payload: {\r\n                        pokemon\r\n                    }\r\n                })\r\n            }\r\n            i++\r\n        }, 1)\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}